<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.comma_groupware.mapper.ApprovalMapper">
 <!-- 공통: 로그인 사원의 현재 부서/팀 찾아오기 -->
  <select id="selectMyCurrentDeptInfo" parameterType="int" resultType="map">
    SELECT  e.emp_id   AS empId,
            e.emp_name AS empName,
            d.dept_id,
            d.dept_name AS deptName,
            t.team_id,
            t.team_name AS teamName
    FROM employee e
    JOIN department_history dh ON dh.emp_id = e.emp_id AND dh.end_date IS NULL
    JOIN team t ON t.team_id = dh.team_id
    JOIN department d ON d.dept_id = t.dept_id
    WHERE e.emp_id = #{empId}
    LIMIT 1
  </select>
  <select id="countFilesByDoc" parameterType="int" resultType="int">
  SELECT COUNT(*)
  FROM file_resource
  WHERE file_ref_type = 'APPROVAL'
    AND file_ref_id   = #{approvalDocumentId}
</select>

  <!-- 1차 결재자: 본인 부서의 부장(=rank_id 2) 이상(사장 rank_id 1 포함) 중 1명 -->
  <select id="selectStep1Approver" parameterType="map" resultType="int">
    SELECT rh.emp_id
    FROM department_history dh
    JOIN team t            ON t.team_id = dh.team_id
    JOIN department d      ON d.dept_id = t.dept_id
    JOIN department_history dh2 ON dh2.team_id = t.team_id AND dh2.end_date IS NULL
    JOIN rank_history rh   ON rh.emp_id = dh2.emp_id AND rh.end_date IS NULL
    WHERE dh.emp_id = #{empId}
      AND dh.end_date IS NULL
      AND rh.rank_id &lt; 3            <!-- 부장(2) 이상 -->
    ORDER BY rh.rank_id ASC          <!-- 사장(1) 우선 → 부장(2) -->
    LIMIT 1
  </select>

  <!-- 2차 결재자(휴가): 인사 부서(‘인사’) 부장 이상 -->
  <select id="selectStep2ApproverForVacation" resultType="int">
    SELECT rh.emp_id
    FROM team t
    JOIN department d      ON d.dept_id = t.dept_id
    JOIN department_history dh ON dh.team_id = t.team_id AND dh.end_date IS NULL
    JOIN rank_history rh   ON rh.emp_id = dh.emp_id AND rh.end_date IS NULL
    WHERE d.dept_name = '인사'
      AND rh.rank_id &lt; 3
    ORDER BY rh.rank_id ASC
    LIMIT 1
  </select>

  <!-- 2차 결재자(지출): 경영 부서 부장 이상 -->
  <select id="selectStep2ApproverForExpense" resultType="int">
    SELECT rh.emp_id
    FROM team t
    JOIN department d      ON d.dept_id = t.dept_id
    JOIN department_history dh ON dh.team_id = t.team_id AND dh.end_date IS NULL
    JOIN rank_history rh   ON rh.emp_id = dh.emp_id AND rh.end_date IS NULL
    WHERE d.dept_name = '경영'
      AND rh.rank_id &lt; 3
    ORDER BY rh.rank_id ASC
    LIMIT 1
  </select>

  <!-- 결재문서 생성 -->
<insert id="insertApprovalDocument" parameterType="map"
        useGeneratedKeys="true" keyProperty="approvalDocumentId">
  INSERT INTO approval_document
    (emp_id, approval_title, document_type, approval_status, is_file, create_at)
  VALUES
    (#{empId}, #{title}, #{documentType}, 'IN_PROGRESS', #{isFile}, NOW())
</insert>

  <!-- 휴가 신청 상세 저장 -->
  <insert id="insertRequestVacation" parameterType="map">
	  INSERT INTO request_vacation
	    (approval_document_id, vacation_id, start_date, end_date, total_days, emergency_contact, handover, vacation_reason)
	  VALUES
	    (#{approvalDocumentId}, #{vacationId}, #{startDate}, #{endDate}, #{totalDays}, #{emergencyContact}, #{handover}, #{vacationReason})
	</insert>

  <!-- 지출 결의 상세 저장 -->
  <insert id="insertRequestExpense" parameterType="map">
	  INSERT INTO request_expense
	    (approval_document_id, expense_id, vendor, pay_method, bank_info, total_amount, expense_date, expense_reason)
	  VALUES
	    (#{approvalDocumentId}, #{expenseId}, #{vendor}, #{payMethod}, #{bankInfo}, #{amount}, #{expenseDate}, #{expenseReason})
	</insert>

  <!-- 결재 라인 생성(1,2차) -->
	<insert id="insertApprovalLine"
	        parameterType="map"
	        useGeneratedKeys="true"
	        keyProperty="approvalLineId"
	        keyColumn="approval_line_id">
	  INSERT INTO approval_line
	    (approval_document_id, emp_id, approval_step, approval_status, file_count)
	  VALUES
	    (#{approvalDocumentId}, #{empId}, #{approvalStep}, 'PENDING', 0)
	</insert>

  <!-- 내 문서 리스트(사원 본인) - 상태별 -->
  <select id="selectMyDocuments" parameterType="map" resultType="map">
    SELECT ad.approval_document_id AS approvalDocumentId,
           ad.approval_title       AS title,
           ad.document_type        AS documentType,
           ad.approval_status      AS status,
           ad.create_at            AS createdAt,
           ad.complete_at          AS completeAt
    FROM approval_document ad
    WHERE ad.emp_id = #{empId}
      <if test="status != null and status != ''">
        AND ad.approval_status = #{status}
      </if>
    ORDER BY ad.approval_document_id DESC
  </select>

  <!-- 할일 결재(내게 할당된 결재라인) -->
  <select id="selectMyTodoApprovalLines" parameterType="int" resultType="map">
  SELECT DISTINCT
         al.approval_line_id     AS approvalLineId,
         al.approval_document_id AS approvalDocumentId,
         al.approval_step        AS step,
         al.approval_status      AS lineStatus,
         ad.approval_title       AS title,
         ad.document_type        AS documentType,
         ad.emp_id               AS writerEmpId,
         ad.approval_status      AS docStatus,
         ad.create_at            AS createdAt
  FROM approval_line al
  JOIN approval_document ad
    ON ad.approval_document_id = al.approval_document_id
  WHERE al.emp_id = #{empId}
    AND al.approval_status = 'PENDING'
    AND ad.approval_status = 'IN_PROGRESS'   
    AND (
         al.approval_step = 1
      OR ( al.approval_step = 2 AND EXISTS (
             SELECT 1 FROM approval_line prev
             WHERE prev.approval_document_id = al.approval_document_id
               AND prev.approval_step = 1
               AND prev.approval_status = 'APPROVED'
           )
         )
    )
  ORDER BY al.approval_line_id DESC
  </select>

  <!-- 완료된 결재라인(내가 결재한 것) -->
  <select id="selectMyDoneApprovalLines" parameterType="int" resultType="map">
    SELECT al.approval_line_id     AS approvalLineId,
           al.approval_document_id AS approvalDocumentId,
           al.approval_step        AS step,
           al.approval_status      AS lineStatus,
           al.approve_at           AS approveAt,
           ad.approval_title       AS title,
           ad.document_type        AS documentType,
           ad.approval_status      AS docStatus
    FROM approval_line al
    JOIN approval_document ad ON ad.approval_document_id = al.approval_document_id
    WHERE al.emp_id = #{empId}
      AND al.approval_status IN ('APPROVED', 'REJECTED')
    ORDER BY al.approve_at DESC
  </select>

  <!-- 결재라인 단건 조회(권한 체크용) -->
  <select id="selectApprovalLineById" parameterType="int" resultType="map">
    SELECT * FROM approval_line WHERE approval_line_id = #{approvalLineId}
  </select>

  <!-- 문서 상세 -->
  <select id="selectDocumentDetail" parameterType="int" resultType="map">
	  SELECT
	    ad.approval_document_id AS approvalDocumentId,
	    ad.emp_id               AS writerEmpId,
	    emp.emp_name            AS writerName,
	    ad.approval_title       AS title,
	    ad.document_type        AS documentType,
	    ad.approval_status      AS status,
	    ad.is_file              AS isFile,
	    ad.create_at            AS createdAt,
	    ad.complete_at          AS completeAt,
	    d.dept_name             AS writerDeptName,
	    t.team_name             AS writerTeamName
	  FROM approval_document ad
	  JOIN employee emp ON emp.emp_id = ad.emp_id
	  LEFT JOIN department_history dh ON dh.emp_id = ad.emp_id AND dh.end_date IS NULL
	  LEFT JOIN team t   ON t.team_id = dh.team_id
	  LEFT JOIN department d ON d.dept_id = t.dept_id
	  WHERE ad.approval_document_id = #{approvalDocumentId}
	</select>

  <!-- 휴가/지출 상세 -->
<select id="selectVacationDetail" parameterType="int" resultType="map">
    SELECT
      rv.approval_document_id AS approvalDocumentId,
      rv.vacation_id          AS vacationId,
      v.vacation_title        AS vacationTitle,
      rv.start_date           AS startDate,
      rv.end_date             AS endDate,
      rv.total_days           AS totalDays,     
      rv.emergency_contact    AS emergencyContact,
      rv.handover             AS handover,
      rv.vacation_reason      AS vacationReason
    FROM request_vacation rv
    JOIN vacation v ON v.vacation_id = rv.vacation_id
    WHERE rv.approval_document_id = #{approvalDocumentId}
</select>

<select id="selectExpenseDetail" parameterType="int" resultType="map">
  SELECT
    re.approval_document_id AS approvalDocumentId,
    re.expense_id           AS expenseId,
    e.expense_title         AS expenseTitle,   
    re.vendor               AS vendor,
    re.pay_method           AS payMethod,
    re.bank_info            AS bankInfo,
    re.total_amount         AS totalAmount,
    re.expense_date         AS expenseDate, 
    re.expense_reason       AS expenseReason 
  FROM request_expense re
  JOIN expense e ON e.expense_id = re.expense_id
  WHERE re.approval_document_id = #{approvalDocumentId}
</select>

  <!-- 해당 문서의 결재라인 전체 -->
  <select id="selectApprovalLinesByDoc" parameterType="int" resultType="map">
    SELECT al.approval_line_id AS approvalLineId,
           al.emp_id           AS approverEmpId,
           emp.emp_name        AS approverName, 
           al.approval_step    AS step,
           al.approval_status  AS status,
           al.approve_at       AS decidedAt
    FROM approval_line al
    JOIN employee emp ON emp.emp_id = al.emp_id
    WHERE al.approval_document_id = #{approvalDocumentId}
    ORDER BY al.approval_step ASC
  </select>

  <!-- 결재라인 상태 업데이트(승인/반려) -->
  <update id="updateApprovalLineStatus" parameterType="map">
    UPDATE approval_line
    SET approval_status = #{status},
        approve_at = NOW()
    WHERE approval_line_id = #{approvalLineId}
      AND emp_id = #{approverEmpId}
      AND approval_status = 'PENDING'
  </update>

  <!-- 반려 사유 기록 -->
  <insert id="insertRejectReason" parameterType="map">
    INSERT INTO reject_reason (approval_line_id, reject_reason, reject_at)
    VALUES (#{approvalLineId}, #{rejectReason}, NOW())
  </insert>

  <!-- 문서 상태 업데이트 (전체 승인 완료/반려 즉시) -->
  <update id="updateDocumentStatus" parameterType="map">
    UPDATE approval_document
    SET approval_status = #{status},
        complete_at = <choose>
                         <when test="status == 'APPROVED' or status == 'REJECTED'">NOW()</when>
                         <otherwise>NULL</otherwise>
                      </choose>
    WHERE approval_document_id = #{approvalDocumentId}
  </update>

  <!-- 모든 결재라인이 APPROVED 인지 확인 -->
  <select id="isAllLinesApproved" parameterType="int" resultType="boolean">
    SELECT CASE WHEN COUNT(*) = 0 THEN TRUE ELSE FALSE END
    FROM approval_line
    WHERE approval_document_id = #{approvalDocumentId}
      AND approval_status != 'APPROVED'
  </select>
  
	<!-- !!!!!!!!! 추가됨 !!!!!!!!! emp 연차 row 보장 -->
	<insert id="ensureAnnualLeaveRow" parameterType="int">
	  INSERT INTO annual_leave (emp_id, annual_leave_count)
	  VALUES (#{empId}, 0)
	  ON DUPLICATE KEY UPDATE annual_leave_count = annual_leave_count
	</insert>
	<!-- !!!!!!!!! 추가됨 !!!!!!! 잔여연차가 충분할 때만 차감: 적용행이 1이면 성공, 0이면 부족 -->
	<update id="tryDecrementAnnualLeaveIfEnough" parameterType="map">
	  UPDATE annual_leave
	  SET annual_leave_count =
	      CAST(ROUND(COALESCE(annual_leave_count, 0) - CAST(#{days} AS DECIMAL(5,1)), 1) AS DECIMAL(5,1))
	  WHERE emp_id = #{empId}
	    AND COALESCE(annual_leave_count, 0) >= CAST(#{days} AS DECIMAL(5,1))
	  <!-- 연도별 관리 시 아래 한 줄 추가 -->
	  <!-- AND leave_year = YEAR(CURDATE()) -->
	</update>
  <select id="countOverlappingApprovedVacations" parameterType="map" resultType="int">
  SELECT COUNT(*)
  FROM request_vacation rv
  JOIN approval_document ad
    ON ad.approval_document_id = rv.approval_document_id
  WHERE ad.emp_id = #{empId}
    AND ad.document_type = 'VACATION'
    AND ad.approval_status = 'APPROVED'
    AND rv.end_date   &gt;= #{startDate}
    AND rv.start_date &lt;= #{endDate}
    AND rv.approval_document_id != #{excludeDocId}
</select>

<!-- 같은 팀 후보 중 1명 선택 (부장2 > 과장3 > 대리5), 사장(1) 제외, 오늘 휴가중 제외 -->
<select id="selectNextApproverInTeam" parameterType="map" resultType="int">
  SELECT emp.emp_id
  FROM department_history dh_writer
  JOIN department_history dh_cand ON dh_cand.team_id = dh_writer.team_id AND dh_cand.end_date IS NULL
  JOIN rank_history rh ON rh.emp_id = dh_cand.emp_id AND rh.end_date IS NULL
  JOIN employee emp ON emp.emp_id = rh.emp_id
  WHERE dh_writer.emp_id = #{writerEmpId}
    AND dh_writer.end_date IS NULL
    AND rh.rank_id IN (2,3,5)                  <!-- 부장, 과장, 대리만 -->
    AND rh.rank_id != 1                        <!-- 사장 제외 (안전망) -->
    <if test="excludeEmpId != null">
      AND emp.emp_id != #{excludeEmpId}        <!-- 1차/2차 중복 방지 -->
    </if>
    <!-- 오늘 기준 휴가(승인됨)인 사람 제외 -->
    AND NOT EXISTS (
      SELECT 1
      FROM request_vacation rv
      JOIN approval_document ad2 ON ad2.approval_document_id = rv.approval_document_id
      WHERE ad2.emp_id = emp.emp_id
        AND ad2.document_type = 'VACATION'
        AND ad2.approval_status = 'APPROVED'
        AND rv.start_date &lt;= CURDATE()
        AND rv.end_date   &gt;= CURDATE()
    )
	ORDER BY
	  CASE rh.rank_id WHEN 2 THEN 0 WHEN 3 THEN 1 WHEN 5 THEN 2 ELSE 99 END,
	  COALESCE(emp.emp_exp, 0) DESC,
	  emp.emp_id ASC                     <!-- 타이브레이커: 경력 내림차순 -->
  LIMIT 1
</select>
  <!-- 해당 문서의 특정 스텝 라인 존재 여부 -->
<select id="existsApprovalLineForStep" parameterType="map" resultType="boolean">
  SELECT CASE WHEN COUNT(*) &gt; 0 THEN TRUE ELSE FALSE END
  FROM approval_line
  WHERE approval_document_id = #{docId}
    AND approval_step = #{step}
</select>
<!-- 부서(인사=2, 경영=3)에서 1명 선택: 부장(2)→과장(3)→대리(5) 우선, 사장(1) 제외, OOO 제외, 결정적 정렬 -->
<select id="selectNextApproverInDept" parameterType="map" resultType="int">
  SELECT emp.emp_id
  FROM team t
  JOIN department d            ON d.dept_id = t.dept_id
  JOIN department_history dh   ON dh.team_id = t.team_id AND dh.end_date IS NULL
  JOIN rank_history rh         ON rh.emp_id = dh.emp_id AND rh.end_date IS NULL
  JOIN employee emp            ON emp.emp_id = rh.emp_id
  WHERE d.dept_id = #{deptId}
    AND rh.rank_id IN (2,3,5)
    AND rh.rank_id &lt;&gt; 1
    <if test="excludeEmpId != null">
      AND emp.emp_id != #{excludeEmpId}
    </if>
    <if test="writerEmpId != null">
      AND emp.emp_id != #{writerEmpId}   <!-- 작성자 본인 제외(자가결재 방지) -->
    </if>
    AND NOT EXISTS (
      SELECT 1
      FROM request_vacation rv
      JOIN approval_document ad2 ON ad2.approval_document_id = rv.approval_document_id
      WHERE ad2.emp_id = emp.emp_id
        AND ad2.document_type = 'VACATION'
        AND ad2.approval_status = 'APPROVED'
        AND rv.start_date &lt;= CURDATE()
        AND rv.end_date   &gt;= CURDATE()
    )
	ORDER BY
	  CASE rh.rank_id WHEN 2 THEN 0 WHEN 3 THEN 1 WHEN 5 THEN 2 ELSE 99 END,
	  COALESCE(emp.emp_exp, 0) DESC,
	  emp.emp_id ASC
  LIMIT 1
</select>

  <!-- 파일 저장(file_resource) -->
  <insert id="insertFile" parameterType="map" useGeneratedKeys="true" keyProperty="fileId">
    INSERT INTO file_resource
      (file_size, file_origin_name, file_name, file_ref_type, file_ref_id, file_ext, file_uploader, upload_at)
    VALUES
      (#{size}, #{originName}, #{saveName}, 'APPROVAL', #{refId}, #{ext}, #{uploaderEmpId}, NOW())
  </insert>


<!-- 문서별 첨부 목록 -->
<select id="selectFilesByDoc" parameterType="int" resultType="map">
  SELECT file_id        AS fileId,
         file_origin_name AS originName,
         file_size      AS size,
         file_name      AS saveName,
         file_ext       AS ext,
         upload_at      AS uploadAt
  FROM file_resource
  WHERE file_ref_type = 'APPROVAL'
    AND file_ref_id   = #{approvalDocumentId}
  ORDER BY file_id
</select>

<!-- 첨부 단건 -->
<select id="selectFileById" parameterType="int" resultType="map">
  SELECT file_id          AS fileId,
         file_origin_name AS originName,
         file_name        AS saveName,
         file_ext         AS ext,
         file_size        AS size,
         file_ref_id      AS refId,      -- [ADDED]
         file_ref_type    AS refType     -- (선택) 점검용
  FROM file_resource
  WHERE file_id = #{fileId}
  LIMIT 1
</select>

<!-- 첨부 삭제(단건) -->
<delete id="deleteFileById" parameterType="int">
  DELETE FROM file_resource WHERE file_id = #{fileId}
</delete>


  <!-- 진행된 라인 수 -->
  <select id="countNonPendingLines" parameterType="int" resultType="int">
    SELECT COUNT(*)
    FROM approval_line
    WHERE approval_document_id = #{approvalDocumentId}
      AND approval_status != 'PENDING'
  </select>

  <!-- 제목(+is_file) 갱신 -->
  <update id="updateApprovalTitle" parameterType="map">
    UPDATE approval_document
    SET approval_title = #{title},
        is_file = #{isFile}
    WHERE approval_document_id = #{approvalDocumentId}
  </update>

  <!-- 휴가/지출 업데이트 -->
  <update id="updateRequestVacation" parameterType="map">
    UPDATE request_vacation
    SET vacation_id       = #{vacationId},
        start_date        = #{startDate},
        end_date          = #{endDate},
        total_days        = #{totalDays},
        emergency_contact = #{emergencyContact},
        handover          = #{handover},
        vacation_reason   = #{vacationReason}
    WHERE approval_document_id = #{approvalDocumentId}
  </update>

<!-- 지출 상세 업데이트 -->
<update id="updateRequestExpense" parameterType="map">
  UPDATE request_expense
  SET expense_id     = #{expenseId},
      vendor         = #{vendor},
      pay_method     = #{payMethod},
      bank_info      = #{bankInfo},
      total_amount   = #{amount},
      expense_date   = #{expenseDate},
      expense_reason = #{expenseReason}
  WHERE approval_document_id = #{approvalDocumentId}
</update>

<!-- 문서 삭제용(자식→부모 순) -->
<delete id="deleteFilesByDoc" parameterType="int">
  DELETE FROM file_resource
  WHERE file_ref_type = 'APPROVAL'
    AND file_ref_id   = #{approvalDocumentId}
</delete>

<delete id="deleteApprovalLinesByDoc" parameterType="int">
  DELETE FROM approval_line WHERE approval_document_id = #{approvalDocumentId}
</delete>

<delete id="deleteRequestVacationByDoc" parameterType="int">
  DELETE FROM request_vacation WHERE approval_document_id = #{approvalDocumentId}
</delete>

<delete id="deleteRequestExpenseByDoc" parameterType="int">
  DELETE FROM request_expense WHERE approval_document_id = #{approvalDocumentId}
</delete>

<delete id="deleteDocument" parameterType="int">
  DELETE FROM approval_document WHERE approval_document_id = #{approvalDocumentId}
</delete>
  <!-- 소유자/상태 -->
  <select id="selectDocOwnerAndStatus" parameterType="int" resultType="map">
    SELECT emp_id AS empId, approval_status AS status
    FROM approval_document
    WHERE approval_document_id = #{approvalDocumentId}
  </select>

  <!-- 코드/타이틀 -->
  <select id="selectExpenseCodes" resultType="map">
    SELECT expense_id AS expenseId, expense_title AS expenseTitle
    FROM expense
    ORDER BY expense_id
  </select>

  <select id="selectVacationCodes" resultType="map">
    SELECT vacation_id AS vacationId, vacation_title AS vacationTitle
    FROM vacation
    ORDER BY vacation_id
  </select>

  <select id="selectAnnualLeave" parameterType="int" resultType="double">
    SELECT annual_leave_count FROM annual_leave WHERE emp_id = #{empId}
  </select>

  <select id="selectExpenseTitleById" parameterType="int" resultType="string">
    SELECT expense_title FROM expense WHERE expense_id = #{expenseId}
  </select>

  <select id="selectVacationTitleById" parameterType="int" resultType="string">
    SELECT vacation_title FROM vacation WHERE vacation_id = #{vacationId}
  </select>
  
<select id="selectMyActionableLineForDoc" parameterType="map" resultType="map">
  SELECT 
    al.approval_line_id  AS approvalLineId,
    al.emp_id            AS approverEmpId,
    al.approval_step     AS step,
    al.approval_status   AS status
  FROM approval_line al
  WHERE al.approval_document_id = #{docId}
    AND al.emp_id = #{empId}
    AND al.approval_status = 'PENDING'
    AND (
      al.approval_step = 1
      OR (
        al.approval_step = 2
        AND EXISTS (
          SELECT 1 FROM approval_line prev
          WHERE prev.approval_document_id = al.approval_document_id
            AND prev.approval_step = 1
            AND prev.approval_status = 'APPROVED'
        )
      )
    )
  LIMIT 1
</select>

<insert id="insertExpenseItems" parameterType="map">
  INSERT INTO request_expense_item
    (approval_document_id, use_date, memo, taxable, supply, vat, total)
  VALUES
  <foreach collection="items" item="it" separator=",">
    (#{approvalDocumentId}, #{it.useDate}, #{it.memo}, #{it.taxable}, #{it.supply}, #{it.vat}, #{it.total})
  </foreach>
</insert>

<select id="selectExpenseItemsByDoc" parameterType="int" resultType="map">
  SELECT
    item_id  AS itemId,
    use_date AS useDate,
    memo, taxable, supply, vat, total
  FROM request_expense_item
  WHERE approval_document_id = #{approvalDocumentId}
  ORDER BY item_id
</select>

<select id="selectExpenseItemSumsByDoc" parameterType="int" resultType="map">
  SELECT
    COALESCE(SUM(supply),0) AS sumSupply,
    COALESCE(SUM(vat),0)    AS sumVat,
    COALESCE(SUM(total),0)  AS sumTotal
  FROM request_expense_item
  WHERE approval_document_id = #{approvalDocumentId}
</select>

<delete id="deleteExpenseItemsByDoc" parameterType="int">
  DELETE FROM request_expense_item WHERE approval_document_id = #{approvalDocumentId}
</delete>

</mapper>