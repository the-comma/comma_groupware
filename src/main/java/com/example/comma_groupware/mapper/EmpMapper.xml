<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.comma_groupware.mapper.EmpMapper">
	<!-- 전체 직원 수 조회 -->
    <select id="selectEmployeeCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM employee
        <where>
            <if test="searchWord != null and searchWord != ''">
                (emp_name LIKE CONCAT('%', #{searchWord}, '%')
                OR username LIKE CONCAT('%', #{searchWord}, '%')
                OR emp_email LIKE CONCAT('%', #{searchWord}, '%'))
            </if>
        </where>
    </select>
	<!-- 인사관리용 직원 조회  -->
    <select id="selectEmployeeList" parameterType="map" resultType="java.util.Map">
        SELECT
            e.emp_id AS empId,
            e.emp_name AS empName,
            e.emp_email AS empEmail,
            e.emp_status AS empStatus,
            e.emp_phone AS empPhone,
            e.emp_exp AS empExp,
            e.`role` AS `role`,
            s.salary_amount AS salaryAmount,
            r.rank_name AS rankName,
            d.dept_name AS deptName,
            t.team_name AS teamName
        FROM
            employee e
        LEFT OUTER JOIN
            salary s ON e.emp_Id = s.emp_id
        LEFT OUTER JOIN
            rank_history rh ON e.emp_Id = rh.emp_id
        LEFT OUTER JOIN
            `rank` r ON rh.rank_id = r.rank_id
        LEFT OUTER JOIN
            department_history dh ON e.emp_Id = dh.emp_id
        LEFT OUTER JOIN
            team t ON dh.team_id = t.team_id
        LEFT OUTER JOIN
            department d ON t.dept_id = d.dept_id
        <where>
            <if test="searchWord != null and searchWord != ''">
                (e.emp_name LIKE CONCAT('%', #{searchWord}, '%')
                OR e.username LIKE CONCAT('%', #{searchWord}, '%')
                OR e.emp_email LIKE CONCAT('%', #{searchWord}, '%'))
            </if>
        </where>
        ORDER BY e.emp_id DESC
        LIMIT #{rowPerPage} OFFSET #{beginRow}
    </select>
	<!-- 급여 수정 -->
    <update id="updateSalary" parameterType="map">
        UPDATE salary
        SET
            salary_amount = #{salaryAmount}
        WHERE
            emp_id = #{empId}
    </update>

    <update id="updateRankHistoryEndDate" parameterType="map">
        UPDATE rank_history
        SET end_date = NOW()
        WHERE emp_id = #{empId} AND end_date IS NULL
    </update>
    
    <insert id="insertRankHistory" parameterType="map">
        INSERT INTO rank_history (emp_id, rank_id, start_date)
        VALUES (#{empId}, (SELECT rank_id FROM `rank` WHERE rank_name = #{rankName}), NOW())
    </insert>

    <update id="updateDeptHistoryEndDate" parameterType="map">
        UPDATE department_history
        SET end_date = NOW()
        WHERE emp_id = #{empId} AND end_date IS NULL
    </update>

    <insert id="insertDeptHistory" parameterType="map">
        INSERT INTO department_history (emp_id, team_id, start_date)
        VALUES (#{empId}, (SELECT team_id FROM `team` WHERE team_name = #{teamName}), NOW())
    </insert>

    <delete id="deleteEmployee" parameterType="string">
        DELETE FROM employee WHERE emp_id = #{empId}
    </delete>

    <delete id="deleteAnonymousLike" parameterType="string">
        DELETE FROM anonymous_like WHERE emp_id = #{empId}
    </delete>

    <delete id="deleteAnonymousComment" parameterType="string">
        DELETE FROM anonymous_comment WHERE writer_id = #{empId}
    </delete>

    <delete id="deleteAnonymousPost" parameterType="string">
        DELETE FROM anonymous_post WHERE writer_id = #{empId}
    </delete>

    <delete id="deleteSalary" parameterType="string">
        DELETE FROM salary WHERE emp_id = #{empId}
    </delete>

    <delete id="deleteRankHistory" parameterType="string">
        DELETE FROM rank_history WHERE emp_id = #{empId}
    </delete>

    <delete id="deleteDepartmentHistory" parameterType="string">
        DELETE FROM department_history WHERE emp_id = #{empId}
    </delete>

</mapper>