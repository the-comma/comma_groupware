<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.comma_groupware.mapper.HrmMapper">
	<!-- 전체 직원 수 조회 -->
	<select id="selectEmployeeCount" parameterType="string"
		resultType="int">
		SELECT COUNT(*)
		FROM employee
		<where>
			<if test="searchWord != null and searchWord != ''">
				(emp_name LIKE CONCAT('%', #{searchWord}, '%')
				OR username LIKE CONCAT('%', #{searchWord}, '%')
				OR emp_email LIKE CONCAT('%', #{searchWord}, '%'))
			</if>
		</where>
	</select>
	<!-- 인사관리용 직원 조회 -->
	<select id="selectEmployeeList" parameterType="map"
		resultType="java.util.Map">
		SELECT
			e.emp_id AS empId,
			e.emp_name AS empName,
			e.emp_email AS empEmail,
			e.emp_status AS empStatus,
			e.emp_phone AS empPhone,
			e.emp_exp AS empExp,
			e.`role` AS `role`,
			s.salary_amount AS salaryAmount,
			r.rank_name AS rankName,
			d.dept_name AS deptName,
			t.team_name AS teamName
		FROM
			employee e
		LEFT OUTER JOIN
			salary s ON e.emp_Id = s.emp_id
		LEFT OUTER JOIN
			rank_history rh ON e.emp_Id = rh.emp_id AND rh.end_date IS NULL
		LEFT OUTER JOIN
			`rank` r ON rh.rank_id = r.rank_id
		LEFT OUTER JOIN
			department_history dh ON e.emp_Id = dh.emp_id AND dh.end_date IS NULL
		LEFT OUTER JOIN
			team t ON dh.team_id = t.team_id
		LEFT OUTER JOIN
			department d ON t.dept_id = d.dept_id
		<where>
			<if test="searchWord != null and searchWord != ''">
				(e.emp_name LIKE CONCAT('%', #{searchWord}, '%')
				OR e.username LIKE CONCAT('%', #{searchWord}, '%')
				OR e.emp_email LIKE CONCAT('%', #{searchWord}, '%'))
			</if>
		</where>
		ORDER BY e.emp_id DESC
		<!-- LIMIT #{rowPerPage} OFFSET #{beginRow} -->
	</select>

	<!-- 특정 직원 정보 조회 -->
	<select id="selectEmployeeById" parameterType="string"
		resultType="java.util.Map">
		SELECT
		e.emp_id AS empId,
		e.emp_name AS empName,
		e.emp_status AS empStatus,
		s.salary_amount AS salaryAmount,
		r.rank_name AS rankName,
		d.dept_name AS deptName,
		t.team_name AS teamName
		FROM
		employee e
		LEFT JOIN salary s ON e.emp_id = s.emp_id
		LEFT JOIN rank_history rh ON e.emp_id = rh.emp_id AND rh.end_date IS NULL
		LEFT JOIN `rank` r ON rh.rank_id = r.rank_id
		LEFT JOIN department_history dh ON e.emp_id = dh.emp_id AND dh.end_date IS
		NULL
		LEFT JOIN team t ON dh.team_id = t.team_id
		LEFT JOIN department d ON t.dept_id = d.dept_id
		WHERE e.emp_id = #{empId}
	</select>
	
	<!--사원 등록 -->
  	<insert id="insertEmployee">
    INSERT INTO employee (
        emp_id, username, password, emp_name, emp_status, emp_email, emp_phone, emp_exp,
        role, created_at
    ) VALUES (
        #{empId}, #{empName}, #{password}, #{empName}, '재직' , #{empEmail}, #{empPhone}, #{empExp},
        #{role}, NOW()
    )
	</insert>
  	<!-- 신규직원 급여 등록 -->
  	<insert id="insertSalary" parameterType="com.example.comma_groupware.dto.Salary">
  		INSERT INTO salary (
  		emp_id, salary_amount) VALUES (
  		#{empId}, #{salaryAmount})
  	</insert>
  	<!-- 직급 이력 추가 -->
	
    <!-- 직급 이력 등록 (조회된 rank_id 사용) -->
    <insert id="insertRankHistory">
        INSERT INTO rank_history (
            emp_id, rank_id, start_date
        ) VALUES (
            #{empId}, #{rankId}, NOW()
        )
    </insert>

	<!-- 부서 이력 추가  -->
	<insert id="insertDeptHistory">
        INSERT INTO department_history (
            emp_id, team_id, start_date
        ) VALUES (
            #{empId}, #{teamId}, NOW()
        )
    </insert>
    
	<!-- 급여 수정 -->
	<update id="updateSalary" parameterType="com.example.comma_groupware.dto.Salary">
		UPDATE salary
		SET
		salary_amount = #{salaryAmount}
		WHERE
		emp_id = #{empId}
	</update>
	<!-- 재직 상태 수정 -->
	<update id ="updateStatus" parameterType="com.example.comma_groupware.dto.Employee">
		UPDATE employee
		SET 
		emp_status = #{empStatus}
		WHERE
		emp_id = #{empId}
		
	</update>
	<!-- 업데이트 일시  -->
	<update id ="updateDate" parameterType="com.example.comma_groupware.dto.Employee">
		UPDATE employee
		SET 
		updated_at = now()
		WHERE
		emp_id = #{empId}	
	</update>
	<!-- 직급 이력 end date 수정 -->
	<update id="updateRankHistoryEndDate" parameterType="com.example.comma_groupware.dto.RankHistory">
		UPDATE rank_history
		SET end_date = NOW()
		WHERE emp_id = #{empId} AND end_date IS NULL
	</update>
	
	
	<!-- 부서 이력 end Date 수정 -->
	<update id="updateDeptHistoryEndDate" parameterType="com.example.comma_groupware.dto.DepartmentHistory">
		UPDATE department_history
		SET end_date = NOW()
		WHERE emp_id = #{empId} AND end_date IS NULL
	</update>
	
	<!-- 모든 직급 조회 -->
	<select id="selectAllRanks" resultType="string">
		SELECT rank_name FROM `rank`
	</select>
	

	
	<!-- 부서별 팀 조회 -->
	<select id="selectTeamsByDepartment" resultType="string">
		SELECT team_name AS teamName
		FROM team
		WHERE dept_id = (SELECT dept_id FROM department WHERE dept_name =
		#{deptName})
	</select>
	<!-- 팀 이름으로 팀 ID 조회 -->
	<select id="selectTeamIdByTeamName" parameterType="string" resultType="int">
		SELECT team_id AS teamId
		FROM team 
		WHERE team_name = #{teamName}
	</select>
	<!-- 직급 이름으로 직급ID 조회 -->
	<select id="selectRankIdByRankName" resultType="int">
	    SELECT rank_id AS rankId
	    FROM `rank`
	    WHERE rank_name = #{rankName}
	</select>
	
	<!-- 부서 등록 -->
	<insert id="insertNewDept" parameterType="com.example.comma_groupware.dto.Department">
		INSERT INTO department (dept_name)
		VALUES (#{deptName})
	</insert>

	<!-- 부서명 수정 -->
	<update id="updateDeptName" parameterType="com.example.comma_groupware.dto.Department">
		UPDATE department
		SET dept_name = #{deptName}
		WHERE dept_id = #{deptId}
	</update>
	
	<!-- 전체 부서 조회 (ID와 이름 모두 포함) -->
	<select id="getAllDepartmentsWithId" resultType="com.example.comma_groupware.dto.Department">
        SELECT dept_id  AS deptId, dept_name AS deptName 
        FROM department
    </select>

    <!-- 팀 관리  -->
    <insert id="insertNewTeam" parameterType="com.example.comma_groupware.dto.Team">
        INSERT INTO team (team_name, dept_id) 
        VALUES (#{teamName}, #{deptId})
    </insert>

    <update id="updateTeam" parameterType="com.example.comma_groupware.dto.Team">
        UPDATE team 
        SET team_name = #{teamName}, dept_id = #{deptId} 
        WHERE team_id = #{teamId}
    </update>


    <select id="getTeamsByDeptId" resultType="com.example.comma_groupware.dto.Team">
        SELECT team_id AS teamId, team_name AS teamName, dept_id as deptId FROM team WHERE dept_id = #{deptId}
    </select>
</mapper>
